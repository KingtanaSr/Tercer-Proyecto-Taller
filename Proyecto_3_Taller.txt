import pygame
import time

# Tamaño de la ventana
tam_ventana = (300, 300)
# Colores
blanco = (255, 255, 255)
verde_oscurito = (0, 150, 0)
verde = (0, 255, 0)
negro = (0, 0, 0)

numeros = input()

# Separar los números ingresados por espacios y convertirlos a enteros
numeros = [int(num) for num in numeros.split()]

# Crear una matriz nula de 3x3
rompecabezas_dado = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

# Llenar la matriz de forma secuencial con los números ingresados
for i in range(3):
    for j in range(3):
        rompecabezas_dado[i][j] = numeros[i*3 + j]

if rompecabezas_dado:
    pygame.init()
    ventana = pygame.display.set_mode(tam_ventana)

def dibujar_rompecabezas(rompecabezas):
    ventana.fill(blanco)
    anchura_cuadro, altura_cuadro = tam_ventana[0] // 3, tam_ventana[1] // 3
    for i in range(3):
        for j in range(3):
            numero = rompecabezas[i][j]  # posicion de cada elemento de la matriz "rectangulo"
            if numero != 0:  # si el numero no es cero entonces se dibuja un cuadrado y se le pone el numero en el centro del 1 al 8
                pygame.draw.rect(ventana, verde, (j * anchura_cuadro, i * altura_cuadro, anchura_cuadro, altura_cuadro))
                fuente = pygame.font.Font(None, 36)
                texto = fuente.render(str(numero), True, negro)
                texto_rect = texto.get_rect(center=(j * anchura_cuadro + anchura_cuadro // 2, i * altura_cuadro + altura_cuadro // 2))
                ventana.blit(texto, texto_rect)
            else:  # si es cero entonces solo se dibuja un cuadrado que va a representar el espacio vacio
                pygame.draw.rect(ventana, verde_oscurito, (j * anchura_cuadro, i * altura_cuadro, anchura_cuadro, altura_cuadro))
                fuente = pygame.font.Font(None, 36)
                texto = fuente.render(None, True, negro)
                texto_rect = texto.get_rect(center=(j * anchura_cuadro + anchura_cuadro // 2, i * altura_cuadro + altura_cuadro // 2))
                ventana.blit(texto, texto_rect)
    pygame.display.update()  # se actualiza la ventana con cada movimiento

def espacio_vacio(rompecabezas):  # se obtiene la posicion del espacio vacío que está representado con un 0
    for i in range(3):
        for j in range(3):
            if rompecabezas[i][j] == 0:
                return i, j

def movimientos_pieza(rompecabezas):
    movimientos = []
    vacio_i, vacio_j = espacio_vacio(rompecabezas)
    movimientos_posibles = [[vacio_i - 1, vacio_j], [vacio_i + 1, vacio_j], [vacio_i, vacio_j - 1], [vacio_i, vacio_j + 1]]
    for i, j in movimientos_posibles:
        if 0 <= i < 3 and 0 <= j < 3:
            nuevo_romp = [fila.copy() for fila in rompecabezas]
            nuevo_romp[vacio_i][vacio_j] = nuevo_romp[i][j]
            nuevo_romp[i][j] = 0
            movimientos.append(nuevo_romp)
    return movimientos

def heu_dist(rompecabezas): #función de la heurística para priorizar los movimientos que tienen una menor distancia estimada al estado objetivo.
    romp_obj = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    dist_t = 0
    for i in range(3):
        for j in range(3):
            if rompecabezas[i][j] != romp_obj[i][j]:
                dist_t += 1
    return dist_t

def BFS(rompecabezas):
    visitados = []  #se crea una lista vacía para almacenar los rompecabezas que ya han sido "visitados" en la búsqueda
    cola = [[heu_dist(rompecabezas), rompecabezas, []]]  # se crea una cola que guarda tripletes que representan la heurística, el rompecabezas actual y el "recorrido"
    while cola != []:
        cola.sort()  # se ordena la cola en función de la heurística para priorizar los movimientos que tienen una menor distancia estimada al estado objetivo.
        heu, romp_actual, recorrido = cola.pop(0)  # Se extrae el primer elemento de la cola que son la heurística, el estado actual del rompecabezas y el recorrido hasta ese estado
        romp_actual_tuple = tuple(map(tuple, romp_actual))
        if romp_actual_tuple in visitados:  # se verifica si el estado actual del rompecabezas ya ha sido visitado
            continue
        visitados.append(romp_actual_tuple)  # se agrega el estado actual del rompecabezas a la lista de visitados para evitar ciclos
        if romp_actual == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:  # si el estado del rompecabezas llega a ser como se desea, se devuelve el recorrido que se realizó para llegar a esa conclusión, y esa sería la solución
            return recorrido
        movimientos = movimientos_pieza(romp_actual)  # si el estado actual del rompecabezas no es el deseado, se generan más movimientos a partir del estado actual
        for movimiento in movimientos:
            cola.append((heu_dist(movimiento), movimiento, recorrido + [movimiento]))  # se agrega a la cola la heurística, el movimiento y la ruta que se ha hecho hasta el momento
    return [0]  # Si la cola está vacía y no se ha encontrado la solución, se devuelve una lista vacía para indicar que no se encontró una solución

solucion = BFS(rompecabezas_dado)  

if rompecabezas_dado:
    if solucion:  # si hay solucion entonces se dibuja el rompecabezas y se espera 1 segundo entre cada actualización de la pantalla de cada movimiento
        dibujar_rompecabezas(rompecabezas_dado)
        time.sleep(1)
        for paso in solucion:
            for elm in paso:
                print(*elm, end=" ")
                print()  
            print()  
            dibujar_rompecabezas(paso)
            time.sleep(1)
    time.sleep(5)
    pygame.quit()